package blusterCritter;

mport java.util.ArrayList;
import java.util.LinkedList;

import info.gridworld.grid.AbstractGrid;
import info.gridworld.grid.Location;

public class SparseBoundedGrid<E> extends AbstractGrid<E>{
	private ArrayList<LinkedList<OccupantInCol>> arrayList;
	private int row,col;
	/**
     * Constructs an empty bounded grid with the given dimensions.
     * (Precondition: <code>rows > 0</code> and <code>cols > 0</code>.)
     * @param rows number of rows in BoundedGrid
     * @param cols number of columns in BoundedGrid
     */
	public SparseBoundedGrid(int rows, int cols)
    {
        if (rows <= 0)
            throw new IllegalArgumentException("rows <= 0");
        if (cols <= 0)
            throw new IllegalArgumentException("cols <= 0");
        row = rows;
        col = cols;
        arrayList = new ArrayList<LinkedList<OccupantInCol>>(rows);
        for(int i = 0;i < rows;i++) {
        	LinkedList<OccupantInCol> temp = new LinkedList<OccupantInCol>();
        	arrayList.add(temp);
        }
    }
	@Override
	public int getNumRows() {
		// TODO Auto-generated method stub
		return row;
	}

	@Override
	public int getNumCols() {
		// TODO Auto-generated method stub
		return col;
	}

	@Override
	public boolean isValid(Location loc) {
		// TODO Auto-generated method stub
		return (0<= loc.getRow() && loc.getRow() < row && 0 <= loc.getCol() && loc.getCol() < col);
	}
	
	@Override
	public E put(Location loc, E obj) {
		// TODO Auto-generated method stub
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        if (obj == null)
            throw new NullPointerException("obj == null");
        E oldOccupant = get(loc);
		int r = loc.getRow();
		int c = loc.getCol();
		OccupantInCol element = new OccupantInCol(obj,c);
		if(arrayList.get(r).size() == 0) {
			arrayList.get(r).add(element);
		}
		else {
			int i;
			for(i = 0;i < arrayList.get(r).size();i++) {
				if(arrayList.get(r).get(i).getColumn() > c) {
					break;
				}
			}
			arrayList.get(r).add(i, element);
		}
		return oldOccupant;
	}

	@Override
	public E remove(Location loc) {
		// TODO Auto-generated method stub
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
		int r = loc.getRow();
		int c = loc.getCol();
		E oldOccupant = get(loc);
		if(arrayList.get(r) != null) {
			for(int i = 0;i < arrayList.get(r).size();i++) {
				if(arrayList.get(r).get(i).getColumn() == c) {
					arrayList.get(r).remove(i);
				}
			}
		}
		return oldOccupant;
	}

	@SuppressWarnings("unchecked")
	@Override
	public E get(Location loc) {
		// TODO Auto-generated method stub
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
		int r = loc.getRow();
		int c = loc.getCol();
		if(arrayList != null && arrayList.size() > r && arrayList.get(r).size() != 0)
		for(int i = 0;i < arrayList.get(r).size();i++) {
			if(arrayList.get(r).get(i).getColumn() == c) {
				return (E) arrayList.get(r).get(i).GetObject();
			}
		}
		return null;
	}

	@Override
	public ArrayList<Location> getOccupiedLocations() {
		// TODO Auto-generated method stub
		ArrayList<Location> theLocations = new ArrayList<Location>();
		for(int r = 0;r < row;r++) {
			for(int c = 0;c < col;c++) {
				Location loc = new Location(r,c);
				if(get(loc) != null) {
					theLocations.add(loc);
				}
			}
		}
		return theLocations;
	}
	
}










import info.gridworld.actor.Actor;
import info.gridworld.actor.Critter;
import info.gridworld.grid.Location;

import java.util.ArrayList;
import java.awt.Color;

public class BlusterCritter extends Critter
{
	private int courage;
	private static final double DARKENING_FACTOR = 0.05;

	public BlusterCritter() {
		courage = 0;
    setColor(Color.RED);
	}

	public BlusterCritter(int c) {
		courage = c;
    setColor(new Color(100,100,100));
	}

	public ArrayList<Actor> getActors()
    {
      ArrayList<Actor> actors = new ArrayList<Actor>();
      int begin_r = getLocation().getRow() - 2;
      int begin_c = getLocation().getCol() - 2;
      int end_r = getLocation().getRow() + 2;
      int end_c = getLocation().getCol() + 2;
      for (int i = begin_r; i <= end_r; ++i) {
      	for (int j = begin_c; j <= end_c; ++j) {
      		if (i == getLocation().getRow() && j == getLocation().getCol())
      			continue;
      		Location loc = new Location(i, j);
      		if (getGrid().isValid(loc)) {
      			if  (getGrid().get(loc) != null && getGrid().get(loc) instanceof Critter)
      				actors.add(getGrid().get(loc));
      		}
      	}
      }
      return actors;
    }

    public void processActors(ArrayList<Actor> actors) {
    	Color c = getColor();
    	if (actors.size() >= courage) {
            int red = (int) (c.getRed() * (1 - DARKENING_FACTOR));
            int green = (int) (c.getGreen() * (1 - DARKENING_FACTOR));
            int blue = (int) (c.getBlue() * (1 - DARKENING_FACTOR));
            setColor(new Color(red, green, blue));
    	}
    	else {
    		int red = (int) (c.getRed() * (1 + DARKENING_FACTOR)) <= 255 ? (int) (c.getRed() * (1 + DARKENING_FACTOR)) : 255;
            int green = (int) (c.getGreen() * (1 + DARKENING_FACTOR)) <= 255 ? (int) (c.getGreen() * (1 + DARKENING_FACTOR)) : 255;
            int blue = (int) (c.getBlue() * (1 + DARKENING_FACTOR)) <= 255 ? (int) (c.getBlue() * (1 + DARKENING_FACTOR)) : 255;
            setColor(new Color(red, green, blue));
    	}
    }
}



















































public class HelloWorld {
	public static void main(String[] args) {
		System.out.println("Hello World!");
	}
	public int add(int x, int y) {
		int res = x + y;
		return res;
	}
	public String str() {
		return "Hello World";
	}
};

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

public class HelloWorldTest extends TestCase{
	public void testgetInt() {
		HelloWorld t1 = new HelloWorld();
		assertEquals(5, t1.add(2, 3));
	}
	public void teststr() {
		HelloWorld t2 = new HelloWorld();
		assertEquals("Hello_World", t2.str());
	}
}



<?xml version="1.0" encoding="UTF-8" ?>
<project name="HelloWorld" default="run" basedir=".">
<property name="src" value="src"/>
<property name="dest" value="classes"/>
<property name="hello_jar" value="HelloWorld.jar"/>

<target name="junit">
	<available property="junit.present" classname="junit.framework.TestCase"/>
</target>

<target name="init" depends="junit">
   <mkdir dir="${dest}"/>
</target>

<target name="compile" depends="init">
   <javac srcdir="${src}" destdir="${dest}"/>
</target>

<target name="run" depends="compile">
   <java classname="HelloWorld" classpath="${dest}"/>
</target>

<target name="test" depends="compile">
	<junit printsummary="yes">
		<formatter type="plain"/>
		<classpath path="${dest}"/>
		<test name="HelloWorldTest"/>
	</junit>
</target>
</project>













<?xml version="1.0"?>
<project name="CalculatorAPP" default="rerun" basedir=".">
    <description>
        Calculator build file
    </description>

    <property name="src" location="src" />
    <property name="build" location="build" />
    <property name="dist" location="dist" />

    <target name="init">
        <tstamp/>
        <mkdir dir="${build}" />
    </target>

    <target name="compile" depends="init" description="compile the source">
        <javac srcdir="${src}" destdir="${build}"/>
    </target>

    <target name="dist" depends="compile" description="generate the distribution">
        <mkdir dir="${dist}/lib" />
        <jar jarfile="dist/lib/CalculatorApp-${DSTAMP}.jar" basedir="${build}" />
    </target>

    <target name="run" depends="dist" description="run the program">
        <java classname="CalculatorApp" fork="true" classpath="dist/lib/CalculatorApp-${DSTAMP}.jar"/>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build}" />
        <delete dir="${dist}" />
    </target>

    <target name="rerun" description="clean and run">
        <ant target="clean" />
        <ant target="run" />
    </target>
</project>

